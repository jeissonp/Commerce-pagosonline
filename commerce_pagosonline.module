<?php
define ('PO_URL_SERVER', 'https://gateway.pagosonline.net/apps/gateway/index.html');
define ('PO_URL_SERVER_TEST', 'https://gateway2.pagosonline.net/apps/gateway/index.html');

define ('PO_URL_CONFIRMATION', 'admin/commerce/pagosonline/confirmation');
define ('PO_URL_RESPONSE', 'admin/commerce/pagosonline/response');

/*
 * Implements hook_permission().
 */
function commerce_pagosonline_permission() {
  $perm = array(
    'pagosonline settings' => array(
      'title' => 'Settings Pagos Online'
    ),
    'pagosonline detail transaction' => array(
      'title' => 'View Details Transaction'
    ),
  );
  return $perm;
}

/**
 * Implements hook_menu().
 */

function commerce_pagosonline_menu() {
  $menu = array();

  $menu['admin/commerce/pagosonline/settings'] = array(
    'title' => t('Settings Pagosonline'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pagosonline_settings_form'),
    'access arguments' => array('pagosonline settings'),
    'type' => MENU_CALLBACK,
  );
  $menu['admin/commerce/pagosonline/response/%/%/%'] = array(
    'page callback' => 'commerce_pagosonline_response',
    'page arguments' => array(2, 3, 4), //$order_id, $sale_reference, $option
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_pagosonline.inc',
  );
  $menu['admin/commerce/pagosonline/confirmation/%/%/%'] = array(
    'page callback' => 'commerce_pagosonline_confirmation',
    'page arguments' => array(2, 3, 4), //$order_id, $sale_reference, $option
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_pagosonline.inc',
  );
  $menu['admin/commerce/pagosonline/transaction/view/%/%'] = array(
    'page callback' => 'commerce_pagosonline_transaction_view',
    'page arguments' => array(3),
    'access callback' => TRUE,
    //'access callback' => 'commerce_pagosonline_transaction_view_validate',
    //'access arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_pagosonline_transaction.inc',
  );
  return $menu;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_pagosonline_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['pagosonline'] = array(
    'base' => 'commerce_pagosonline',
    'title' => t('Pagosonline pay by (Visa, Master Card, American Expres, Diners)'),
    'short_title' => t('PagosOnline'),
    'description' => t('Pagos Online Payments Standard'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  return $payment_methods;
}

/**
 * Form Settings Pagos Online
 **/
function commerce_pagosonline_settings_form($settings = NULL) {
  //module_load_include('inc', 'commerce_pagosonline');
  $form = array();
  $form['po_uid'] = array(
    '#title' => t('The number of user'),
    '#description' => t('The number of user in the system Pagosonline.net'),
    '#type' => 'textfield',
    '#size' => 12,
    '#default_value' => isset($settings['po_uid']) ? $settings['po_uid'] : 2,
    '#required' => TRUE,
  );
  $form['po_encryption_key'] = array(
    '#title' => t('Encryption key'),
    '#type' => 'textfield',
    '#default_value' => isset($settings['po_encryption_key']) ? $settings['po_encryption_key'] : '1111111111111111',
    '#size' => 50,
    '#required' => TRUE,
  );
  $form['po_action_url'] = array(
    '#title' => t('Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => isset($settings['po_action_url']) ? $settings['po_action_url'] : PO_URL_SERVER,
    '#required' => TRUE,
  );
  $form['po_action_url_test'] = array(
    '#title' => t('Test Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => isset($settings['po_action_url_test']) ? $settings['po_action_url_test'] : PO_URL_SERVER_TEST,
    '#required' => TRUE,
  );

  $items = commerce_tax_rates();
  $options = array('None' => t('None'));
  foreach ($items as $name => $item) {
    $options[$name] = $item['title'];
  }

  $form['po_tax'] = array(
    '#title' => t('Tax Rate'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($settings['po_tax']) ? $settings['po_tax'] : '',
  );
  $form['po_alias'] = array(
    '#title' => t('Alias'),
    '#description' => t('Is concatenated with the order number, example: @example', array('@example' => '"' . @$settings['po_alias'] . '1"')),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($settings['po_alias']) ? $settings['po_alias'] : 'PO-',
  );
  $form['po_testing'] = array(
    '#title' => t('Test Enabled'),
    '#type' => 'select',
    '#options' => array(
      '0' => t('No'),
      '1' => t('Yes'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['po_testing']) ? $settings['po_testing'] : '',
  );

  return $form;
}

function commerce_pagosonline_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

}
function commerce_pagosonline_redirect_form($form, &$form_state, $order, $payment_method) {
  //dpm($payment_method);
  $settings = $payment_method['settings'];

  if (!isset($settings['po_uid']) || empty($settings['po_uid'])) {
    drupal_set_message(t('Pagos Online is not configured for use. No user Id has been specified.'), 'error');
    return array();
  }

  module_load_include('inc', 'commerce_pagosonline');
  //Cargar total de la orden
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $settings['currency_code'] = $wrapper->commerce_order_total->currency_code->value();

  $settings['amount'] = number_format($wrapper->commerce_order_total->amount->value(), 2, '.', ''); //Format: 1000.00

  //Tax
  $taxes = array(
    'base_price' => 0,
    $settings['po_tax'] => 0,
  );

  $components = $wrapper->commerce_order_total->data->value();
  if (@$components['components']) {
    foreach ($components['components'] as $key => $component) {
      if ($component['name'] == 'base_price') {
        $taxes['base_price'] = $component['price']['amount'];
      }
      elseif ($settings['po_tax'] == $component['price']['data']['tax_rate']['name']) {
        $taxes[$settings['po_tax']] = $component['price']['amount'];
      }
    }
    //dpm($settings);
    dpm($components);
  }
  dpm($taxes);
  //dpm($order);
  //$user_id = $payment_method['settings']['pagosonline_uid'];

  //$encryption_key = $payment_method['settings']['pagosonline_encryption_key'];

  $settings['sale_reference'] = commerce_pagosonline_get_reference($settings['po_alias'], $order->order_id);
  //$settings =


  //$currency_type = 'COP';


  $signature = commerce_pagosonline_get_firm($settings);

  $url_page = commerce_pagosonline_get_url($order->order_id);

  $form['#action'] = $settings['po_action_url'];

  $data = array(
    'usuarioId' => $settings['po_uid'],
    'descripcion' => t('commerce virtual store purchase'),
    'refVenta' => $settings['sale_reference'],
    'valor' => $settings['amount'],
    'baseDevolucionIva' => $taxes['base_price'],
    'iva' => $taxes[$settings['po_tax']],
    'emailComprador' => $order->mail,
    'moneda' => $settings['currency_code'],
    'firma' => $signature,
    'url_confirmacion' => $url_page['confirmation'],
    'url_respuesta' => $url_page['response'],
    'extra1' => $payment_method['instance_id'],
  );

  //Mode Test
  if (@$payment_method['settings']['pagosonline_testing']) {
    $data['prueba'] = 1;
    $form['#action'] = $settings['po_action_url_test'];
  }

  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PagosOnline'),
  );
  return $form;
}
